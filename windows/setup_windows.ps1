# Windows-specific setup script
# Handles Windows environment configuration, registry settings, and Windows-specific tools

# Windows-specific exports and environment variables
$WindowsExports = @{
    "EDITOR" = if (Get-Command code -ErrorAction SilentlyContinue) { "code" } else { "notepad" }
    "BROWSER" = "chrome"
    "TERMINAL" = "wt"  # Windows Terminal
}

# Windows-specific aliases
$WindowsAliases = @{
    "ll" = "Get-ChildItem -Force"
    "la" = "Get-ChildItem -Force -Hidden"
    "open" = "Invoke-Item"
    "which" = "Get-Command"
    "grep" = "Select-String"
    "find" = "Get-ChildItem -Recurse -Name"
    "ps" = "Get-Process"
    "kill" = "Stop-Process"
    "top" = "Get-Process | Sort-Object CPU -Descending | Select-Object -First 10"
    "df" = "Get-WmiObject -Class Win32_LogicalDisk | Select-Object DeviceID, @{Name='Size(GB)';Expression={[math]::Round($_.Size/1GB,2)}}, @{Name='FreeSpace(GB)';Expression={[math]::Round($_.FreeSpace/1GB,2)}}"
}

# Function to set Windows environment variables
function Set-WindowsEnvironment {
    Write-Host "Configuring Windows environment variables..." -ForegroundColor Cyan
    
    foreach ($env in $WindowsExports.GetEnumerator()) {
        [Environment]::SetEnvironmentVariable($env.Key, $env.Value, "User")
        Write-Host "Set $($env.Key) = $($env.Value)" -ForegroundColor Green
    }
    
    # Add common development paths
    $currentPath = [Environment]::GetEnvironmentVariable("Path", "User")
    $newPaths = @(
        "$env:USERPROFILE\.local\bin",
        "$env:USERPROFILE\scoop\shims",
        "$env:USERPROFILE\AppData\Local\Programs\Microsoft VS Code\bin"
    )
    
    foreach ($path in $newPaths) {
        if ($currentPath -notlike "*$path*") {
            $currentPath += ";$path"
        }
    }
    
    [Environment]::SetEnvironmentVariable("Path", $currentPath, "User")
    Write-Host "SUCCESS: Windows environment configured" -ForegroundColor Green
}

# Function to configure PowerShell profile
function Configure-PowerShellProfile {
    Write-Host "Configuring PowerShell profile..." -ForegroundColor Cyan
    
    $profilePath = $PROFILE.CurrentUserCurrentHost
    $profileDir = Split-Path $profilePath -Parent
    
    # Create profile directory if it doesn't exist
    if (-not (Test-Path $profileDir)) {
        New-Item -ItemType Directory -Path $profileDir -Force
    }
    
    # Backup existing profile
    if (Test-Path $profilePath) {
        $backupPath = "$profilePath.backup.$(Get-Date -Format 'yyyyMMdd')"
        Copy-Item $profilePath $backupPath -Force
    }
    
    # Create PowerShell profile with aliases and functions
    $profileContent = @"
# Windows Development Environment PowerShell Profile
# Generated by dev-machine-setup

# Set PowerShell execution policy for current user
Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser -Force

# Import modules
if (Get-Module -ListAvailable -Name PSReadLine) {
    Import-Module PSReadLine
    Set-PSReadLineOption -PredictionSource History
    Set-PSReadLineOption -HistorySearchCursorMovesToEnd
}

# Set aliases
$(foreach ($alias in $WindowsAliases.GetEnumerator()) {
    "Set-Alias -Name '$($alias.Key)' -Value '$($alias.Value)'"
})

# Useful functions
function gs { git status }
function ga { git add . }
function gc { param([string]`$message) git commit -m `$message }
function gp { git push }
function gl { git pull }

function mkd { param([string]`$name) New-Item -ItemType Directory -Name `$name; Set-Location `$name }
function .. { Set-Location .. }
function ... { Set-Location ..\.. }
function .... { Set-Location ..\..\.. }

function reload { . `$PROFILE }
function edit-profile { code `$PROFILE }

function weather { 
    param([string]`$city = "")
    if (`$city) {
        Invoke-RestMethod "https://wttr.in/`$city?format=3"
    } else {
        Invoke-RestMethod "https://wttr.in/?format=3"
    }
}

function sysinfo {
    Get-ComputerInfo | Select-Object WindowsProductName, WindowsVersion, TotalPhysicalMemory, CsProcessors
}

# Git prompt function (basic)
function prompt {
    `$location = Get-Location
    `$gitBranch = ""
    
    if (Test-Path ".git") {
        try {
            `$branch = git branch --show-current 2>`$null
            if (`$branch) {
                `$gitBranch = " [`$branch]"
            }
        } catch {
            # Ignore git errors
        }
    }
    
    "PS `$location`$gitBranch> "
}

# Welcome message
Write-Host "Windows Development Environment Loaded" -ForegroundColor Green
Write-Host "Type 'Get-Alias' to see available aliases" -ForegroundColor Yellow
Write-Host "Type 'edit-profile' to customize this profile" -ForegroundColor Yellow
"@

    Set-Content -Path $profilePath -Value $profileContent -Encoding UTF8
    Write-Host "SUCCESS: PowerShell profile configured" -ForegroundColor Green
    Write-Host "Profile location: $profilePath" -ForegroundColor Cyan
}

# Function to configure Windows Terminal
function Configure-WindowsTerminal {
    Write-Host "Configuring Windows Terminal..." -ForegroundColor Cyan
    
    $terminalSettingsPath = "$env:LOCALAPPDATA\Packages\Microsoft.WindowsTerminal_8wekyb3d8bbwe\LocalState\settings.json"
    
    if (Test-Path $terminalSettingsPath) {
        # Backup existing settings
        $backupPath = "$terminalSettingsPath.backup.$(Get-Date -Format 'yyyyMMdd')"
        Copy-Item $terminalSettingsPath $backupPath -Force
        Write-Host "Windows Terminal settings backed up to: $backupPath" -ForegroundColor Yellow
        Write-Host "SUCCESS: Windows Terminal configuration prepared" -ForegroundColor Green
    }
    else {
        Write-Host "Windows Terminal not found, skipping configuration" -ForegroundColor Yellow
    }
}

# Function to configure Windows registry settings
function Set-WindowsRegistry {
    Write-Host "Configuring Windows registry settings..." -ForegroundColor Cyan
    
    try {
        # Show file extensions
        Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" -Name "HideFileExt" -Value 0
        
        # Show hidden files
        Set-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" -Name "Hidden" -Value 1
        
        # Disable web search in start menu
        if (-not (Test-Path "HKCU:\Software\Policies\Microsoft\Windows\Explorer")) {
            New-Item -Path "HKCU:\Software\Policies\Microsoft\Windows\Explorer" -Force
        }
        Set-ItemProperty -Path "HKCU:\Software\Policies\Microsoft\Windows\Explorer" -Name "DisableSearchBoxSuggestions" -Value 1
        
        Write-Host "SUCCESS: Windows registry configured" -ForegroundColor Green
    } catch {
        Write-Host "WARNING: Some registry settings failed: $($_.Exception.Message)" -ForegroundColor Yellow
    }
}

# Function to setup Windows development directories
function Setup-DevDirectories {
    Write-Host "Creating development directories..." -ForegroundColor Cyan
    
    $devDirs = @(
        "$env:USERPROFILE\Projects",
        "$env:USERPROFILE\Scripts",
        "$env:USERPROFILE\.local\bin"
    )
    
    foreach ($dir in $devDirs) {
        if (-not (Test-Path $dir)) {
            New-Item -ItemType Directory -Path $dir -Force
            Write-Host "Created: $dir" -ForegroundColor Green
        }
    }
    
    Write-Host "SUCCESS: Development directories created" -ForegroundColor Green
}

# Function to install and configure Windows Subsystem for Linux
function Install-WSL {
    Write-Host "Installing Windows Subsystem for Linux..." -ForegroundColor Cyan
    
    # Enable WSL feature
    try {
        Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux -NoRestart
        Enable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform -NoRestart
        
        Write-Host "SUCCESS: WSL features enabled" -ForegroundColor Green
        
        # Update WSL to latest version before configuration
        Write-Host "Updating WSL to latest version..." -ForegroundColor Yellow
        try {
            wsl --update
            Write-Host "SUCCESS: WSL updated to latest version" -ForegroundColor Green
        } catch {
            Write-Host "WARNING: WSL update failed, continuing anyway..." -ForegroundColor Yellow
        }
        
        # Set WSL2 as default
        wsl --set-default-version 2
        
        # Install Ubuntu distribution
        Write-Host "Installing Ubuntu distribution..." -ForegroundColor Yellow
        wsl --install -d Ubuntu
        
        Write-Host "SUCCESS: WSL2 and Ubuntu installed" -ForegroundColor Green
        Write-Host "NOTICE: A reboot may be required to complete WSL installation" -ForegroundColor Yellow
        
    } catch {
        Write-Host "ERROR: Failed to install WSL: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# Main Windows setup function
function Setup-Windows {
    Write-Host "Running Windows-specific setup..." -ForegroundColor Cyan
    
    Set-WindowsEnvironment
    Configure-PowerShellProfile
    Configure-WindowsTerminal
    Set-WindowsRegistry
    Setup-DevDirectories

    # Dotfiles setup: generate .gitconfig from template
    $templatePath = "$PSScriptRoot\..\common\.gitconfig.template"
    $targetPath = "$env:USERPROFILE\.gitconfig"
    if (Test-Path $templatePath) {
        Write-Host "Generating .gitconfig from template..." -ForegroundColor Cyan
        $gitName = Read-Host "Enter your Git name"
        $gitEmail = Read-Host "Enter your Git email"
        $content = Get-Content $templatePath -Raw
        $content = $content -replace "__GIT_NAME__", $gitName -replace "__GIT_EMAIL__", $gitEmail
        Set-Content -Path $targetPath -Value $content -Encoding UTF8
        Write-Host "SUCCESS: .gitconfig created at $targetPath" -ForegroundColor Green
    } else {
        Write-Host ".gitconfig.template not found, skipping .gitconfig generation." -ForegroundColor Yellow
    }
    
    Write-Host "SUCCESS: Windows-specific setup complete!" -ForegroundColor Green
    Write-Host "NOTICE: Restart your terminal to apply all changes" -ForegroundColor Yellow
}

# Export the main function
